/*
 * Copyright 2016 Tocco AG
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "de.undercouch.download" version "2.1.0"
}

apply plugin: "java"

sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
    main {
        java {
            srcDir "src"
        }
    }
}

group = "ch.tocco.wkhtmltopdf.binary"
version = "0.12.4"

import de.undercouch.gradle.tasks.download.Download

def downloadOrigin = "https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/"

task downloadLinuxFile(type: Download) {
    src downloadOrigin + version + "/wkhtmltox-" + version + "_linux-generic-amd64.tar.xz"
    dest new File(buildDir, "wkhtmltox.tar.xz")
}

task downloadOsxFile(type: Download) {
    src downloadOrigin + version + "/wkhtmltox-" + version + "_osx-cocoa-x86-64.pkg"
    dest new File(buildDir, "wkhtmltox.pkg")
}

task extractLinuxFile(dependsOn: downloadLinuxFile, type: Exec) {
    def linuxBuildDir = new File(buildDir.toString() + "/linux/")
    linuxBuildDir.mkdirs()
    // Gradle does not support tar.xf files, otherwise this could be done with: from tarTree(resources.gzip(...))
    executable "tar"
    args "-xf", downloadLinuxFile.dest,
            "-C", linuxBuildDir.toString(),
            "--strip-components=2", "wkhtmltox/bin/wkhtmltopdf"
}

task extractPayload(dependsOn: downloadOsxFile, type: Exec) {
    def osxBuildDir = new File(buildDir.toString() + "/osx/")
    osxBuildDir.mkdirs()
    executable "7z"
    args "x", downloadOsxFile.dest, "-w", "-o" + osxBuildDir.toString(), "-y"
}

task extractAppTar(dependsOn: extractPayload, type: Exec) {
    commandLine "bash", "-c", "( cd ${buildDir.toString()}/osx/; cpio -i; ) <${buildDir.toString()}/osx/Payload~"
}

task extractBinary(dependsOn: extractAppTar, type: Exec) {
    executable "tar"
    args "-xf", buildDir.toString() + "/osx/usr/local/share/wkhtmltox-installer/app.tar.xz",
            "-C", buildDir.toString() + "/osx/",
            "--strip-components=2"
}

task extractOsxFile(dependsOn: downloadOsxFile) {
    doFirst {
        tasks.extractPayload.execute()
        tasks.extractAppTar.execute()
        tasks.extractBinary.execute()
    }
}

task linuxJar(type: Jar) {
    from (sourceSets.main.output) {
        include "**"
    }
    doFirst {
        tasks.downloadLinuxFile.execute()
        tasks.extractLinuxFile.execute()
    }
    into ("/ch/tocco/wkhtmltopdf/binary") {
        from file(buildDir.toString() + "/linux/wkhtmltopdf")
    }
    classifier = "linux"
}

task osxJar(type: Jar) {
    from (sourceSets.main.output) {
        include "**"
    }
    doFirst {
        tasks.downloadOsxFile.execute()
        tasks.extractOsxFile.execute()
    }
    into ("/ch/tocco/wkhtmltopdf/binary") {
        from file(buildDir.toString() + "/osx/wkhtmltopdf")
    }
    classifier = "osx"
}

jar.enabled = false // default jar with java classes only is not useful

artifacts {
    archives linuxJar
    archives osxJar
}
